from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from bot import bot
import query_answers
from db.repository import get_order, update_order_data
from telebot import types

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞
respond_states = {}
RESP_STEPS = ["text", "photos", "preview"]

def _is_respond_start(data: str) -> bool:
    parts = data.split(":")
    return len(parts) == 3 and parts[0] == "admin" and parts[1] == "respond" and parts[2].isdigit()

async def prompt_text(chat_id: int, message_id: int, state: dict):
    await bot.edit_message_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:",
        chat_id=chat_id,
        message_id=message_id
    )

async def prompt_photos(chat_id: int, message_id: int, state: dict):
    text = f"‚úèÔ∏è –¢–µ–∫—Å—Ç:\n\n{state['data']['text']}\n\nüì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:"
    kb = InlineKeyboardMarkup(row_width=1)
    order_id = state["order_id"]
    for idx, _ in enumerate(state["data"]["photos"]):
        kb.add(InlineKeyboardButton(f"üì∑ {idx+1}", callback_data=f"{query_answers.ADMIN_RESPOND_PHOTO_VIEW}:{idx}"))
    kb.add(
        InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data=query_answers.ADMIN_RESPOND_NEXT),
        InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=query_answers.ADMIN_RESPOND_PHOTOS_SKIP),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"{query_answers.ADMIN_RESPOND}:{order_id}"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data=query_answers.ADMIN)
    )
    await bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=kb)

async def show_preview(chat_id: int, message_id: int, state: dict):
    text = f"üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–∞:\n\n{state['data']['text']}"
    kb = InlineKeyboardMarkup(row_width=1)
    for idx, _ in enumerate(state["data"]["photos"]):
        kb.add(InlineKeyboardButton(f"üì∑ {idx+1}", callback_data=f"{query_answers.ADMIN_RESPOND_PHOTO_VIEW}:{idx}"))
    order_id = state["order_id"]
    kb.add(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{query_answers.ADMIN_RESPOND}:{order_id}"),
        InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=query_answers.ADMIN_RESPOND_SEND),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=query_answers.ADMIN_RESPOND_BACK),
        InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data=query_answers.ADMIN)
    )
    await bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=kb)

@bot.callback_query_handler(func=lambda c: _is_respond_start(c.data))
async def admin_respond_start(c):
    order_id = int(c.data.split(":")[2])
    respond_states[c.from_user.id] = {
        "order_id": order_id,
        "step": "text",
        "data": {"text": "", "photos": []},
        "message_id": c.message.message_id
    }
    await prompt_text(c.message.chat.id, c.message.message_id, respond_states[c.from_user.id])
    await bot.answer_callback_query(c.id)

@bot.message_handler(
    func=lambda m: m.from_user.id in respond_states and respond_states[m.from_user.id]["step"] == "text",
    content_types=['text']
)
async def handle_respond_text(m):
    st = respond_states[m.from_user.id]
    st["data"]["text"] = m.text
    st["step"] = "photos"
    await bot.delete_message(m.chat.id, m.message_id)
    await prompt_photos(m.chat.id, st["message_id"], st)

@bot.message_handler(
    func=lambda m: m.from_user.id in respond_states and respond_states[m.from_user.id]["step"] == "photos",
    content_types=['photo']
)
async def handle_respond_photo(m):
    st = respond_states[m.from_user.id]
    st["data"]["photos"].append(m.photo[-1].file_id)
    await bot.delete_message(m.chat.id, m.message_id)
    await prompt_photos(m.chat.id, st["message_id"], st)

@bot.callback_query_handler(func=lambda c: c.data == query_answers.ADMIN_RESPOND_PHOTOS_SKIP)
async def handle_skip_photos(c):
    st = respond_states[c.from_user.id]
    st["data"]["photos"] = []
    st["step"] = "preview"
    await bot.answer_callback_query(c.id)
    await show_preview(c.message.chat.id, st["message_id"], st)

@bot.callback_query_handler(func=lambda c: c.data == query_answers.ADMIN_RESPOND_NEXT)
async def handle_next(c):
    st = respond_states[c.from_user.id]
    if st["step"] != "photos":
        await bot.answer_callback_query(c.id)
        return
    st["step"] = "preview"
    await bot.answer_callback_query(c.id)
    await show_preview(c.message.chat.id, st["message_id"], st)

@bot.callback_query_handler(func=lambda c: c.data.startswith(query_answers.ADMIN_RESPOND_PHOTO_VIEW + ":"))
async def handle_view_photo(c):
    st = respond_states[c.from_user.id]
    idx = int(c.data.split(":")[-1])
    await bot.send_photo(c.message.chat.id, st["data"]["photos"][idx])
    await bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data == query_answers.ADMIN_RESPOND_BACK)
async def handle_back(c):
    st = respond_states[c.from_user.id]
    st["step"] = "photos"
    await bot.answer_callback_query(c.id)
    await prompt_photos(c.message.chat.id, st["message_id"], st)

@bot.callback_query_handler(func=lambda c: c.data == query_answers.ADMIN_RESPOND_SEND)
async def handle_send_response(c):
    state = respond_states[c.from_user.id]
    order_id = state["order_id"]
    o = get_order(order_id)
    client_chat = o.user_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    if state["data"]["photos"]:
        media = [InputMediaPhoto(media=fid) for fid in state["data"]["photos"]]
        media[0].caption = state["data"]["text"]
        await bot.send_media_group(client_chat, media)
    else:
        await bot.send_message(client_chat, state["data"]["text"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
    d = o.data
    d.setdefault("responses", []).append(state["data"])
    update_order_data(order_id, d)
    del respond_states[c.from_user.id]

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("‚úÖ –£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", callback_data=f"{query_answers.CLIENT_RESPONSE_ACCEPT}:{order_id}"),
        InlineKeyboardButton("‚ùå –ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", callback_data=f"{query_answers.CLIENT_RESPONSE_REJECT}:{order_id}")
    )
    await bot.send_message(
        client_chat,
        f"üì© –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{order_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
        reply_markup=markup
    )
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await bot.send_message(
        c.message.chat.id,
        f"‚úîÔ∏è –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∑–∞—è–≤–∫–µ #{order_id}.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ", callback_data=f"{query_answers.ADMIN_ORDER}:{order_id}")
        )
    )
    await bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith(query_answers.ADMIN_VIEW_RESPONSE))
async def admin_view_response(c):
    parts = c.data.split(":")
    if len(parts) == 3:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
        order_id = int(parts[2])
        o = get_order(order_id)
        d = o.data
        resp_list = d.get("responses", [])
        if not resp_list:
            await bot.answer_callback_query(c.id, text="–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤", show_alert=True)
            return
        kb = InlineKeyboardMarkup(row_width=1)
        for idx in range(len(resp_list)):
            kb.add(InlineKeyboardButton(f"–û—Ç–≤–µ—Ç {idx+1}", callback_data=f"{query_answers.ADMIN_VIEW_RESPONSE}:{order_id}:{idx}"))
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ", callback_data=f"{query_answers.ADMIN_ORDER}:{order_id}"))
        await bot.edit_message_text(
            "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            reply_markup=kb
        )
        await bot.answer_callback_query(c.id)
    elif len(parts) == 4:
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        order_id = int(parts[2])
        idx = int(parts[3])
        o = get_order(order_id)
        d = o.data
        resp_list = d.get("responses", [])
        if idx < 0 or idx >= len(resp_list):
            await bot.answer_callback_query(c.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞", show_alert=True)
            return
        resp = resp_list[idx]
        text = resp.get("text", "")
        kb = InlineKeyboardMarkup(row_width=1)
        for photo_idx, fid in enumerate(resp.get("photos", [])):
            kb.add(InlineKeyboardButton(f"–§–æ—Ç–æ {photo_idx+1}", callback_data=f"{query_answers.ADMIN_RESPOND_PHOTO_VIEW}:{photo_idx}"))
        kb.add(
            InlineKeyboardButton("üîô –í—Å–µ –æ—Ç–≤–µ—Ç—ã", callback_data=f"{query_answers.ADMIN_VIEW_RESPONSE}:{order_id}"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ", callback_data=f"{query_answers.ADMIN_ORDER}:{order_id}")
        )
        await bot.edit_message_text(
            text,
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            reply_markup=kb
        )
        await bot.answer_callback_query(c.id)
