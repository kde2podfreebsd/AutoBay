from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
import query_answers
from db.repository import get_order, update_order_data, update_order_status
from telebot import types

TYPE_MAP = {
    "auto": "–£—Å–ª—É–≥–∞ –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
    "details_to": "–î–µ—Ç–∞–ª—å –¥–ª—è –¢–û",
    "details_order": "–î–µ—Ç–∞–ª—å –Ω–∞ –∑–∞–∫–∞–∑",
}
STATUS_LABEL = {
    "new": "–ñ–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
    "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
    "closed": "–ó–∞–∫—Ä—ã—Ç–∞",
}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞
invoice_states = {}

@bot.callback_query_handler(func=lambda c: c.data.startswith(query_answers.ADMIN_ORDER + ":"))
async def admin_order_detail(c):
    order_id = int(c.data.split(":")[-1])
    o = get_order(order_id)
    d = o.data
    label = TYPE_MAP.get(o.type, o.type)

    # –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    if o.type in ("details_to", "details_order"):
        if not d.get("responses"):
            pay_label = "–ñ–¥—ë—Ç –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        elif not d.get("response_accepted"):
            pay_label = "–ñ–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"
        elif not d.get("service_price"):
            pay_label = "–ñ–¥—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞"
        else:
            pay_label = "–û–ø–ª–∞—á–µ–Ω–æ" if o.payment_status == "paid" else "–ñ–¥—ë—Ç –æ–ø–ª–∞—Ç—ã"
    else:  # –¥–ª—è –∞–≤—Ç–æ
        pay_label = "–û–ø–ª–∞—á–µ–Ω–æ" if o.payment_status == "paid" else "–ñ–¥—ë—Ç –æ–ø–ª–∞—Ç—ã"

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"{label} #{o.id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{o.username} ({o.user_id})\n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {STATUS_LABEL[o.status]}\n"
        f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {pay_label}\n\n"
    )

    # –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
    if o.type == "details_to":
        text += (
            f"üöó –ú–∞—Ä–∫–∞: {d['brand']}\n"
            f"üöó –ú–æ–¥–µ–ª—å: {d['model']}\n"
            f"üóìÔ∏è –ì–æ–¥: {d['year']}\n"
            f"üîë VIN: {d['vin']}\n"
            f"üîß –î–µ—Ç–∞–ª—å: {d['name']}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {d.get('link') or '‚Äî'}\n\n"
        )
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        for idx, comm in enumerate(d.get("comments", []), start=1):
            text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π #{idx}: {comm}\n\n"

    elif o.type == "auto":
        text += (
            f"üöó –ú–æ–¥–µ–ª—å: {d['model']}\n"
            f"üóìÔ∏è –ì–æ–¥: {d['year']}\n"
            f"üîß –ü—Ä–∏–≤–æ–¥: {', '.join(d['drive'])}\n"
            f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {', '.join(d['fuel'])}\n\n"
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []

    if o.status == "new":
        if o.type == "details_to":
            if d.get("comments") and not d.get("response_accepted"):
                # –ø—Ä–∞–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                buttons.append(
                    InlineKeyboardButton("üõ†Ô∏è –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"{query_answers.ADMIN_TAKE}:{order_id}")
                )
            elif d.get("response_accepted") and not d.get("service_price"):
                # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –æ—Ç–≤–µ—Ç, –µ—â—ë –±–µ–∑ —Å—á—ë—Ç–∞
                buttons.append(
                    InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data=f"{query_answers.ADMIN_VIEW_RESPONSE}:{order_id}")
                )
                buttons.append(
                    InlineKeyboardButton("üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", callback_data=f"{query_answers.ADMIN_INVOICE}:{order_id}")
                )
            else:
                # –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞
                buttons.append(
                    InlineKeyboardButton("üõ†Ô∏è –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"{query_answers.ADMIN_TAKE}:{order_id}")
                )
        else:
            # –∞–≤—Ç–æ –∏–ª–∏ details_order
            buttons.append(
                InlineKeyboardButton("üõ†Ô∏è –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"{query_answers.ADMIN_TAKE}:{order_id}")
            )

    elif o.status == "in_progress":
        if o.type == "details_to":
            # –≤ —Ä–∞–±–æ—Ç–µ: –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–æ–≤
            buttons.append(
                InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data=f"{query_answers.ADMIN_VIEW_RESPONSE}:{order_id}")
            )
            # –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
            if not d.get("response_accepted"):
                buttons.append(
                    InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"{query_answers.ADMIN_RESPOND}:{order_id}")
                )
        elif o.type == "auto":
            buttons.append(
                InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"{query_answers.ADMIN_CLOSE}:{order_id}")
            )
        else:
            buttons.append(
                InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"{query_answers.ADMIN_CLOSE}:{order_id}")
            )

    buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=query_answers.ADMIN))

    # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(*buttons)

    # –§–æ—Ç–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è details_to
    if o.type == "details_to":
        for idx, _ in enumerate(d.get("photos", [])):
            markup.add(
                InlineKeyboardButton(
                    f"üì∑ {idx+1}",
                    callback_data=f"{query_answers.ADMIN_ORDER_PHOTO_VIEW}:{order_id}:{idx}"
                )
            )

    await bot.edit_message_text(
        text,
        chat_id=c.message.chat.id,
        message_id=c.message.message_id,
        reply_markup=markup
    )
    await bot.answer_callback_query(c.id)


@bot.callback_query_handler(func=lambda c: c.data.startswith(query_answers.ADMIN_INVOICE + ":"))
async def admin_invoice_start(c):
    order_id = int(c.data.split(":")[-1])
    invoice_states[c.from_user.id] = order_id
    await bot.send_message(
        c.message.chat.id,
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å—á—ë—Ç–∞ –∑–∞—è–≤–∫–∏ #{order_id}:"
    )
    await bot.answer_callback_query(c.id)


@bot.message_handler(
    func=lambda m: m.from_user.id in invoice_states and m.text.isdigit(),
    content_types=['text']
)
async def admin_invoice_send(m):
    order_id = invoice_states.pop(m.from_user.id)
    amount = int(m.text)

    o = get_order(order_id)
    d = o.data
    d["service_price"] = amount
    update_order_data(order_id, d)

    # –°—Å—ã–ª–∫–∞ YooMoney
    from services.yoomoney_service import YooMoney
    ym = YooMoney()
    url, uuid_tx = ym.create_quickpay(amount, target=f"–ó–∞—è–≤–∫–∞ #{order_id}")

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url),
        InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_yoomoney:{order_id}:{uuid_tx}")
    )

    summary = (
        f"üì¨ –û–ø–ª–∞—Ç–∞ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ:\n\n"
        f"{'üöó –ú–æ–¥–µ–ª—å: ' + d['model'] if o.type=='auto' else 'üöó –ú–∞—Ä–∫–∞: ' + d['brand']}\n"
        # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        f"\nüí∞ –°—É–º–º–∞: {amount} ‚ÇΩ"
    )
    await bot.send_message(o.user_id, summary, reply_markup=markup)
    await bot.send_message(m.chat.id, f"‚úÖ –°—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ø–æ –∑–∞—è–≤–∫–µ #{order_id}")
