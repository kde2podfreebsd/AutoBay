# handlers/orders.py

from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import query_answers
import config
from services.paginator import build_pagination
from db.repository import get_orders_count, get_orders

TYPE_MAP = {"auto": "–£—Å–ª—É–≥–∞ –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"}
PAY_MAP = {"paid": "–û–ø–ª–∞—á–µ–Ω–æ", "pending": "–ñ–¥—ë—Ç –æ–ø–ª–∞—Ç—ã"}
STATUS_MAP = {"new": "–ñ–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏", "in_progress": "–í —Ä–∞–±–æ—Ç–µ", "closed": "–ó–∞–∫—Ä—ã—Ç–∞"}

@bot.callback_query_handler(func=lambda call: call.data.startswith(query_answers.ORDERS))
async def handle_orders(call):
    parts = call.data.split(":")
    page = 1 if len(parts) == 1 else int(parts[2])
    user_id = call.from_user.id
    total = get_orders_count(user_id)
    orders = get_orders(user_id, (page-1)*config.PAGE_SIZE, config.PAGE_SIZE)

    if not orders:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫"
    else:
        o = orders[0]
        text = (
            f"–¢–∏–ø: {TYPE_MAP.get(o.type, o.type)}\n"
            f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {PAY_MAP[o.payment_status]}\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {STATUS_MAP[o.status]}\n\n"
        )
        if o.type == "auto":
            d = o.data
            text += (
                f"üöó –ú–æ–¥–µ–ª—å: {d['model']}\n"
                f"üóìÔ∏è –ì–æ–¥: {d['year']}\n"
                f"üîß –ü—Ä–∏–≤–æ–¥: {', '.join(d['drive'])}\n"
                f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {', '.join(d['fuel'])}"
            )

    markup = build_pagination(page, total, config.PAGE_SIZE, query_answers.ORDERS_PAGE)
    if orders:
        o = orders[0]
        if o.payment_status == "pending":
            markup.add(
                InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooMoney", callback_data=f"{query_answers.PAY_YOOMONEY}:{o.id}"),
                InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa", callback_data=f"{query_answers.PAY_YOOKASSA}:{o.id}")
            )
    markup.add(InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data=query_answers.MENU))

    await bot.edit_message_text(
        text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )
    await bot.answer_callback_query(call.id)
