from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import query_answers
import config
from services.paginator import build_pagination
from db.repository import get_orders_count, get_orders

TYPE_MAP = {
    "auto": "–£—Å–ª—É–≥–∞ –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
    "details_to": "–î–µ—Ç–∞–ª—å –¥–ª—è –¢–û",
    "details_order": "–î–µ—Ç–∞–ª—å –Ω–∞ –∑–∞–∫–∞–∑",
}
STATUS_MAP = {
    "new": "–ñ–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
    "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
    "closed": "–ó–∞–∫—Ä—ã—Ç–∞",
}

@bot.callback_query_handler(func=lambda call: call.data.startswith(query_answers.ORDERS))
async def handle_orders(call):
    parts = call.data.split(":")
    page = 1 if call.data == query_answers.ORDERS else int(parts[-1])
    user_id = call.from_user.id
    total = get_orders_count(user_id)
    orders = get_orders(user_id, (page - 1) * config.PAGE_SIZE, config.PAGE_SIZE)
    if not orders:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫"
    else:
        o = orders[0]
        d = o.data
        label = TYPE_MAP.get(o.type, o.type)
        if o.type == "auto":
            pay_label = "–û–ø–ª–∞—á–µ–Ω–æ" if o.payment_status == "paid" else "–ñ–¥—ë—Ç –æ–ø–ª–∞—Ç—ã"
        elif o.type == "details_to":
            if not d.get("service_price"):
                pay_label = "–ñ–¥—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞"
            else:
                pay_label = "–û–ø–ª–∞—á–µ–Ω–æ" if o.payment_status == "paid" else "–ñ–¥—ë—Ç –æ–ø–ª–∞—Ç—ã"
        else:
            if not d.get("service_paid"):
                pay_label = "–ñ–¥—ë—Ç –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥–∏"
            elif not d.get("invoice_price"):
                pay_label = "–ñ–¥—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞"
            else:
                pay_label = "–û–ø–ª–∞—á–µ–Ω–æ" if o.payment_status == "paid" else "–ñ–¥—ë—Ç –æ–ø–ª–∞—Ç—ã"
        text = (
            f"–¢–∏–ø: {label}\n"
            f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {pay_label}\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {STATUS_MAP.get(o.status, o.status)}\n\n"
        )
        if o.type == "auto":
            text += (
                f"üöó –ú–æ–¥–µ–ª—å: {d['model']}\n"
                f"üóìÔ∏è –ì–æ–¥: {d['year']}\n"
                f"üîß –ü—Ä–∏–≤–æ–¥: {', '.join(d['drive'])}\n"
                f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {', '.join(d['fuel'])}"
            )
        else:
            text += (
                f"üöó –ú–∞—Ä–∫–∞: {d['brand']}\n"
                f"üöó –ú–æ–¥–µ–ª—å: {d['model']}\n"
                f"üóìÔ∏è –ì–æ–¥: {d['year']}\n"
                f"üîë VIN: {d['vin']}\n"
                f"üîß –î–µ—Ç–∞–ª—å: {d['name']}"
            )

    markup = InlineKeyboardMarkup(row_width=1)

    if orders and o.type == "auto" and o.payment_status == "pending":
        markup.add(InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooMoney", callback_data=f"{query_answers.PAY_YOOMONEY}:{o.id}"))
        markup.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa", callback_data=f"{query_answers.PAY_YOOKASSA}:{o.id}"))

    if orders and o.type == "details_to" and d.get("service_price") and o.payment_status == "pending":
        markup.add(InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooMoney", callback_data=f"{query_answers.PAY_YOOMONEY}:{o.id}"))

    if orders and o.type == "details_order" and not d.get("service_paid"):
        markup.add(InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooMoney", callback_data=f"{query_answers.PAY_YOOMONEY}:{o.id}"))

    if orders and o.type == "details_order" and d.get("service_paid") and d.get("invoice_price") and o.payment_status == "pending":
        markup.add(InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç", callback_data=f"{query_answers.PAY_YOOMONEY}:{o.id}"))

    paginator = build_pagination(page, total, config.PAGE_SIZE, query_answers.ORDERS_PAGE)
    for row in paginator.keyboard:
        markup.row(*row)
    markup.add(InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data=query_answers.MENU))

    await bot.edit_message_text(text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    await bot.answer_callback_query(call.id)
