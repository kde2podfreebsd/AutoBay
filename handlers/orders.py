from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import query_answers
import config
from services.paginator import build_pagination
from db.repository import get_orders_count, get_orders

TYPE_MAP = {
    "auto": "–£—Å–ª—É–≥–∞ –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
    "details_to": "–î–µ—Ç–∞–ª—å –¥–ª—è –¢–û",
    "details_order": "–î–µ—Ç–∞–ª—å –Ω–∞ –∑–∞–∫–∞–∑",
}
PAY_MAP = {
    "paid": "–û–ø–ª–∞—á–µ–Ω–æ",
    "pending": "–ñ–¥—ë—Ç –æ–ø–ª–∞—Ç—ã"
}
STATUS_MAP = {
    "new": "–ñ–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
    "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
    "closed": "–ó–∞–∫—Ä—ã—Ç–∞"
}

@bot.callback_query_handler(func=lambda call: call.data.startswith(query_answers.ORDERS))
async def handle_orders(call):
    parts = call.data.split(":")
    if parts[0] == query_answers.ORDERS and len(parts) == 1:
        page = 1
    elif call.data.startswith(query_answers.ORDERS_PAGE):
        page = int(parts[-1])
    else:
        await bot.answer_callback_query(call.id)
        return

    user_id = call.from_user.id
    total = get_orders_count(user_id)
    orders = get_orders(user_id, (page - 1) * config.PAGE_SIZE, config.PAGE_SIZE)

    if not orders:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫"
    else:
        o = orders[0]
        label = TYPE_MAP.get(o.type, o.type)
        data = o.data

        # –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        if o.payment_status == "pending" and data.get("responses") and not data.get("response_accepted"):
            pay_label = "–ñ–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
        else:
            pay_label = PAY_MAP.get(o.payment_status, o.payment_status)

        text = (
            f"–¢–∏–ø: {label}\n"
            f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {pay_label}\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {STATUS_MAP.get(o.status, o.status)}\n\n"
        )

        if o.type == "auto":
            d = o.data
            text += (
                f"üöó –ú–æ–¥–µ–ª—å: {d['model']}\n"
                f"üóìÔ∏è –ì–æ–¥: {d['year']}\n"
                f"üîß –ü—Ä–∏–≤–æ–¥: {', '.join(d['drive'])}\n"
                f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {', '.join(d['fuel'])}"
            )
        elif o.type == "details_to":
            d = o.data
            text += (
                f"üöó –ú–∞—Ä–∫–∞: {d['brand']}\n"
                f"üöó –ú–æ–¥–µ–ª—å: {d['model']}\n"
                f"üóìÔ∏è –ì–æ–¥: {d['year']}\n"
                f"üîë VIN: {d['vin']}\n"
                f"üîß –î–µ—Ç–∞–ª—å: {d['name']}"
            )

    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(row_width=1)

    # –î–ª—è –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ —Å pending‚Äî–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
    if orders and o.type == "auto" and o.payment_status == "pending":
        markup.add(
            InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooMoney", callback_data=f"{query_answers.PAY_YOOMONEY}:{o.id}")
        )
        markup.add(
            InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa", callback_data=f"{query_answers.PAY_YOOKASSA}:{o.id}")
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    paginator = build_pagination(page, total, config.PAGE_SIZE, query_answers.ORDERS_PAGE)
    for row in paginator.keyboard:
        markup.row(*row)

    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
    markup.add(InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data=query_answers.MENU))

    await bot.edit_message_text(
        text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )
    await bot.answer_callback_query(call.id)
