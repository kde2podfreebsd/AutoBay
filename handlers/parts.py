from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import db, config, json
from yookassa_payment_widget import send_yookassa_invoice
from yoomoney_payment_widget import ym

_state = {}
_feedback = {}

@bot.callback_query_handler(lambda c: c.data == 'menu_parts')
async def parts_start(call):
    _state[call.from_user.id] = {
        'step':'await_details',
        'chat_id':call.message.chat.id,
        'msg_id':call.message.message_id
    }
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton('‚Ü©Ô∏è –ú–µ–Ω—é', callback_data='menu_start')
    )
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –∏/–∏–ª–∏ –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        call.message.chat.id, call.message.message_id,
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: _state.get(m.from_user.id,{}).get('step')=='await_details')
async def parts_got_details(msg):
    user_id = msg.from_user.id
    st = _state[user_id]
    await bot.delete_message(st['chat_id'], st['msg_id'])
    await bot.delete_message(msg.chat.id, msg.message_id)
    details = msg.text
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='parts_preview_confirm'),
        InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data='parts_preview_change'),
        InlineKeyboardButton('‚Ü©Ô∏è –ú–µ–Ω—é', callback_data='menu_start')
    )
    sent = await bot.send_message(
        st['chat_id'],
        f"–ü—Ä–µ–≤—å—é –∑–∞—è–≤–∫–∏:\n{details}",
        reply_markup=markup
    )
    _state[user_id] = {
        'step':'preview',
        'details':details,
        'chat_id':st['chat_id'],
        'msg_id':sent.message_id
    }

@bot.callback_query_handler(lambda c: c.data == 'parts_preview_change')
async def parts_preview_change(call):
    user_id = call.from_user.id
    st = _state.get(user_id)
    if not st or st.get('step')!='preview':
        return
    await bot.delete_message(st['chat_id'], st['msg_id'])
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton('‚Ü©Ô∏è –ú–µ–Ω—é', callback_data='menu_start')
    )
    sent = await bot.send_message(
        st['chat_id'],
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –∏/–∏–ª–∏ –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=markup
    )
    _state[user_id] = {
        'step':'await_details',
        'chat_id':st['chat_id'],
        'msg_id':sent.message_id
    }
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(lambda c: c.data == 'parts_preview_confirm')
async def parts_preview_confirm(call):
    user_id = call.from_user.id
    st = _state[user_id]
    oid = db.create_order(user_id, call.from_user.username, 'parts', {'details':st['details']})
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton('‚Ü©Ô∏è –ú–µ–Ω—é', callback_data='menu_start')
    )
    await bot.edit_message_text(
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
        st['chat_id'], st['msg_id'], reply_markup=markup
    )
    await bot.send_message(
        config.ADMIN_CHAT_ID,
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{oid} –æ—Ç @{call.from_user.username}:\nüîß {st['details']}"
    )
    del _state[user_id]

@bot.callback_query_handler(lambda c: c.data.startswith('parts_client_ok_'))
async def parts_client_ok(call):
    oid = int(call.data.split('_')[-1])
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooMoney', callback_data=f'parts_pay_ym_{oid}'),
        InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆK–∞—Å—Å–∞', callback_data=f'parts_pay_uk_{oid}')
    )
    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥–∏ –ø–æ–¥–±–æ—Ä–∞ (8 800 ‚ÇΩ):",
        call.message.chat.id, call.message.message_id,
        reply_markup=markup
    )
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(lambda c: c.data.startswith('parts_pay_ym_'))
async def parts_pay_ym(call):
    oid = int(call.data.rsplit('_',1)[1])
    url, uuid_tx = ym.create_quickpay(8800, 'AutoBay')
    o = db.get_order(oid)
    data = json.loads(o['data'])
    data['service_uuid'] = uuid_tx
    db.update_order_data_and_status(oid, data, 'await_service_payment')
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=url),
        InlineKeyboardButton('–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data=f'parts_ym_check_{oid}')
    )
    await bot.edit_message_text(
        "–î–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª, –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
        call.message.chat.id, call.message.message_id,
        reply_markup=markup
    )
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(lambda c: c.data.startswith('parts_pay_uk_'))
async def parts_pay_uk(call):
    oid = int(call.data.rsplit('_',1)[1])
    await send_yookassa_invoice(
        chat_id=call.message.chat.id,
        title=f"–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ –ø–æ –ø–æ–¥–±–æ—Ä—É #{oid}",
        description=f"–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ –ø–æ –ø–æ–¥–±–æ—Ä—É –∑–∞–ø—á–∞—Å—Ç–∏ #{oid} ‚Äî 8800 ‚ÇΩ",
        order_id=oid,
        amount=8800
    )
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(lambda c: c.data.startswith('parts_client_not_'))
async def parts_client_not(call):
    oid = int(call.data.rsplit('_',1)[1])
    _feedback[call.from_user.id] = {
        'order_id': oid,
        'chat_id': call.message.chat.id,
        'msg_id': call.message.message_id,
        'step': 'collect_comment'
    }
    await bot.edit_message_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –≤–∞—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏:',
        call.message.chat.id, call.message.message_id
    )
    await bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: _feedback.get(m.from_user.id, {}).get('step')=='collect_comment')
async def parts_collect_comment(msg):
    fb = _feedback.pop(msg.from_user.id)
    comment = msg.text
    o = db.get_order(fb['order_id'])
    data = json.loads(o['data'])
    data.setdefault('comments', []).append(comment)
    db.update_order_data_and_status(fb['order_id'], data, 'in_work')
    await bot.send_message(
        config.ADMIN_CHAT_ID,
        f"–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω –∑–∞—è–≤–∫–æ–π #{fb['order_id']}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{comment}"
    )
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton('‚Ü©Ô∏è –ú–µ–Ω—é', callback_data='menu_start')
    )
    await bot.send_message(
        msg.chat.id,
        '–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –∑–∞—è–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–Ω–æ–≤–æ.',
        reply_markup=markup
    )

@bot.callback_query_handler(lambda c: c.data.startswith('parts_pay_part_uk_'))
async def parts_pay_part_uk(call):
    oid = int(call.data.rsplit('_',1)[1])
    data = json.loads(db.get_order(oid)['data'])
    amount = data.get('invoice_amount', 0)
    await send_yookassa_invoice(
        chat_id=call.message.chat.id,
        title=f"–û–ø–ª–∞—Ç–∞ –¥–µ—Ç–∞–ª–∏ #{oid}",
        description=f"–û–ø–ª–∞—Ç–∞ –¥–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–∫–∞–∑—É #{oid} ‚Äî {amount} ‚ÇΩ",
        order_id=oid,
        amount=amount
    )
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(lambda c: c.data.startswith('parts_pay_part_ym_'))
async def parts_pay_part_ym(call):
    oid = int(call.data.rsplit('_',1)[1])
    data = json.loads(db.get_order(oid)['data'])
    amount = data.get('invoice_amount', 0)
    url, uuid_tx = ym.create_quickpay(amount, 'AutoBay')
    data['part_uuid'] = uuid_tx
    db.update_order_data_and_status(oid, data, 'await_part_payment')
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=url),
        InlineKeyboardButton('–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data=f'parts_ym_part_check_{oid}')
    )
    await bot.edit_message_text(
        "–î–ª—è –æ–ø–ª–∞—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª, –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
        call.message.chat.id, call.message.message_id,
        reply_markup=markup
    )
    await bot.answer_callback_query(call.id)